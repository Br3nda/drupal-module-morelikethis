<?php
/*
  Copyright (C) 2008 by Phase2 Technology.
  Author(s): Frank Febbraro

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License.
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY. See the LICENSE.txt file for more details.

  $Id: morelikethis.module,v 1.1.2.1 2008/10/17 21:42:37 febbraro Exp $
*/
/**
 * @file morelikethis.module
 * TODO: - Caching for performance improvements of internal search.
 *       - Add pluggable more like this mechanism that supports:
 *          - the current taxonomy search
 *          - an internal calais search
 *          - yahoo boss search
 *          - internal drupal search
 *          - apache solr search
 *          - any other mechanism that could be imagined
 */

/**
 * Implementation of hook_perm().
 */
function morelikethis_perm() {
  return array('administer morelikethis');
}

/**
 * Implementation of hook_theme().
 */
function morelikethis_theme() {
  $theme = array(
    'morelikethis_block' => array(
      'arguments' => array('items' => NULL),
    ),
    'morelikethis_item' => array(
      'arguments' => array('item' => NULL),
    ),
  );
  return $theme;
}

/**
 * Implementation of hook_menu().
 */
function morelikethis_menu() {
 
  $items = array();
  $access = array('administer morelikethis');

  $services = _morelikethis_providers();
  if (count($services) == 0)
    return $items;
  
  $items['admin/settings/morelikethis'] = array(
    'title' => 'More Like This settings',
    'description' => 'Configuration for More Like This.',
    'page callback' => 'morelikethis_settings',
    'access arguments' => $access,
    'file' => 'morelikethis.admin.inc',
  );

  foreach ( $services as $service => $definition ) {  
    $items['admin/settings/morelikethis/' . $service] = array(
      'title' => $definition['title'] , " Configuration",
      'page callback' => 'drupal_get_form',
      'page arguments' => array($definition['settings']),
      'access arguments' => $access,
    );
  }
  
  return $items;
}

/**
 * Implementation of hook_autoload_info().
 *
 * This is used to load the MoreLikeThis classes for executing searches 
 * without having to explicitly include files.
 */
function morelikethis_autoload_info() {
  $autoload = array(
    'MoreLikeThis' => array(
      'file' => 'morelikethis.class.inc',
    ),
    'MoreLikeThisBase' => array(
      'file' => 'morelikethis.class.inc',
    ),
  );

  $services = _morelikethis_providers();
  foreach ( $services as $service => $definition ) {  
    $class = $definition['class'];
    $file = $definition['file'];
    $filepath = isset($definition['filepath']) 
                  ? $definition['filepath'] 
                  : drupal_get_path('module', $definition['module']);
    $autoload[$class] = array(
      'file' => $file,
      'file path' => $filepath,
    );
  }
  
  return $autoload;
}

/**
 * Get all enabled morelikethis providers. Do some caching to avoid useless DB calls.
 *
 * @param $reset
 *    Should this request rebuild the cache.
 * @return
 *    An array of More Like This providers.
 */
function _morelikethis_providers($reset = FALSE) {
  static $providers;
  if($reset) {
    $providers = NULL;
  }
  
  if(isset($providers)) {
    return $providers;
  }
  else if (!$reset && ($cache = cache_get('morelikethis_providers')) && isset($cache->data)) {
    $providers = $cache->data;
    return $providers;
  }
  
  $providers = array();
  foreach (module_implements('morelikethis') as $module) {
    $provider_details = call_user_func($module .'_morelikethis');
    if (isset($provider_details) && is_array($provider_details)) {
      foreach (array_keys($provider_details) as $item) {
        $provider_details[$item]['module'] = $module;
      }
      $providers = array_merge($providers, $provider_details);
    }
  }
  cache_set('morelikethis_providers', $providers);
  return $providers;
}

/**
 * Implementation of hook_block().
 */
function morelikethis_block($op = 'list', $delta = 0, $edit = array()) {

  switch ($op) {
    case 'list':
      return _mlt_block_list();
      break;
    case 'view':
      return _mlt_block_view($delta);
      break;
  }
}

/**
 * Provide block listing.
 */
function _mlt_block_list(){
  $blocks = array();  
  
  $services = _morelikethis_providers();
  foreach ( $services as $service => $definition ) {
    $blocks[$service] = array(
      'info' => t($definition['title'] . ' Block'),
    );
  }
  
  return $blocks;
}

/**
 * Display the More Like This blocks.
 */
function _mlt_block_view($delta){
  if(arg(0) == 'node' && is_numeric(arg(1))) {
    $services = _morelikethis_providers();
    $service = $services[$delta];
    if($service) {
      $block['subject'] = t($service['title']);
      $more = morelikethis_find(arg(1), $delta);    
      $block['content'] = theme(array("morelikethis_{$delta}_block", 'morelikethis_block'), $more);
    }
  }
  return $block;
}

/**
 * Load MLT term data for a node
 */
function morelikethis_load($vid) {
  $result = db_query("SELECT term FROM {morelikethis} WHERE vid = %d", $vid);
  $terms = array();
  while($term = db_result($result)) {
    $terms[] = $term;
  }
  return $terms;
}


/**
 * Save the data used to render the morelikethis terms.
 */
function morelikethis_save($node, $data) {
  db_query('DELETE FROM {morelikethis} WHERE nid = %d', $node->nid);
  $terms = drupal_explode_tags($data['terms']);
  foreach($terms as $term) {
    db_query("INSERT INTO {morelikethis} (nid, vid, term) VALUES (%d, %d, '%s')", $node->nid, $node->vid, $term);
  }
}

/**
 * Find all morelikethis results for all enabled services.
 */
function morelikethis_find_all($nid) {
  $services = _morelikethis_providers();
  $morelikethis = array();
  foreach ( $services as $service => $definition ) {
    $morelikethis[$service] = morelikethis_find($nid, $service);
  }  
  return $morelikethis;
}

/**
 * Invoke the morelikethis lookup for a particular enabled service.
 *
 * @param nid
 *    The node id to find related content
 * @param $service
 *    The key identifying the morelikethis service to invoke.
 * @see 
 *    hook_morelikethis()
 */
function morelikethis_find($nid, $service = NULL) {
  $node = node_load($nid);

  $terms = morelikethis_load($node->vid);
  $term_count = count($terms);
  
  if($term_count == 0)
    return FALSE;
  
  $services = _morelikethis_providers();
  
  $class = $services[$service]['class'];
  $impl = new $class;
  
  $morelikethis = array();
  if($impl->isEnabled($node->type)) {
    $impl->setNode($node);
    $impl->addTerm($terms);
    $morelikethis = $impl->find();    
  }
  return $morelikethis;
}

/**
 * Implementation of hook_form_alter().
 *
 * Add the More Like This fields to the node edit form.
 */
function morelikethis_form_alter(&$form, $form_state, $form_id) {
  
  if (isset($form['type']) && isset($form['#node']) && $form['type']['#value'] .'_node_form' == $form_id) {
    $node = $form['#node'];
    $key = drupal_strtolower($node->type);
    
    if(!_morelikethis_is_enabled($key))
      return;
        
    if($node->taxonomy) {
      $options = array();
      foreach ($node->taxonomy as $term) {
        $vocab = taxonomy_vocabulary_load($term->vid);
        $key = $vocab->name;
        
        if(!array_key_exists($key, $options)) {
          $options[$key] = array();
        }
        // Remove quotes surrounding terms
        $term_name = preg_replace('/^"(.*)"$/', '\1', $term->name);
        $options[$key][$term_name] = $term_name;
      }
    }
    
    $terms = drupal_implode_tags(morelikethis_load($node->vid));
    
    $form['morelikethis'] = array(
      '#type' => 'fieldset',
      '#title' => t('More Like This'),
      '#tree' => TRUE,
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );

    $form['morelikethis']['terms'] = array(
      '#type' => 'textfield',
      '#title' => t('More Like This Terms'),
      '#description' => t('A comma-separated list of terms that will be used as the "identity" of this content item to find more content that is like this. You can select existing taxonomy terms form the list below, or enter in your own manually. Example: election, stock market, "Company, Inc.".'),
      '#maxlength' => 255,
      '#default_value' => $terms,
    );

    if(!empty($options)) {
      $form['morelikethis']['taxonomy-terms'] = array(
        '#type' => 'select',
        '#title' => t('Choose existing terms'),
        '#description' => t('Selecting terms will put them in the above textfield.'),
        '#size' => 5,
        '#options' => $options,
      );
    }   
    
    $path = drupal_get_path('module', 'morelikethis');
    drupal_add_js("$path/morelikethis.js", 'module');
  }
}

// Check if this type is enabled for any service.
function _morelikethis_is_enabled($type) {
  $services = _morelikethis_providers();

  foreach ( $services as $definition ) {
    $class = $definition['class'];
    $impl = new $class;
    if ($impl->isEnabled($type)) {
      return TRUE;
    }
  }
  
  return FALSE;
}

/**
 * Implementation of hook_nodeapi().
 */
function morelikethis_nodeapi(&$node, $op) {
  switch ($op) {
    case 'insert':
    case 'update':
      if(property_exists($node, 'morelikethis')) {
        morelikethis_save($node, $node->morelikethis);
      }
      break;
    case 'delete':
      db_query('DELETE FROM {morelikethis} WHERE nid = %d', $node->nid);
      break;
    case 'view':
      $more = morelikethis_find_all($node->nid);
      _morelikethis_build_node_properties($node, $more);
      break;
  }
}

/**
 * Builds the morelikethis property for a node.
 *
 * @param $node
 *    The node to add a property that contains More Like This data.
 * @param $more
 *    An array of More Like This data for the provided node.
 */
function _morelikethis_build_node_properties(&$node, $more) {
  $node->morelikethis = array();
  foreach($more as $key => $items) {
    if($items) {
      foreach($items as $item) {
        $entry = array(
          '#item' => $item,
          '#view' => theme(array("morelikethis_{$key}_item", 'morelikethis_item'), $item),
        );
        $node->morelikethis[$key][] = $entry;
      }
    }
  }
}

/**
 * Theme the body of the More Like This block.
 *
 * @param $items
 *    An array of More Like This objects for the provided node.
 */
function theme_morelikethis_block($items){
  if(!$items)
    return t('No related items were found.');
  
  $links = array();
  foreach($items as $item){
    $links[] = theme(array("morelikethis_{$item->mlt_type}_item", 'morelikethis_item'), $item);
  }
  return theme('item_list', $links);
}

/**
 * Theme an individual morelikethis item.
 *
 * @param $item
 *    An More Like This object for the provided node.
 */
function theme_morelikethis_item($item) {
  return l("$item->title", $item->url);
}


